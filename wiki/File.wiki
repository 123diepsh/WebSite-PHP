#labels Class,WebSite-PHP,File
= Class File =





Location: /utils/File.class.php

----


*Remarks*

Class File


WebSite-PHP : PHP Framework 100% object (http://www.website-php.com)  Copyright (c) 2009-2012 WebSite-PHP.com  PHP versions >= 5.2Licensed under The MIT License  Redistributions of files must retain the above copyright notice.


*author:* Emilien MOREL <>

*version:* 1.1.5

*copyright:* WebSite-PHP.com 26/05/2011

*link:* 

*since:* 1.0.13

*access:* public


----
== Class Variable Summary ==
																			* `$action_before_reading` = `false`
		
		
					* `$binary` = ``
		
		
					* `$debug` = `true`
		
		
					* `$exists` = ` false`
		
		
					* `$file` = ``
		
		
					* `$name` = ``
		
		
					* `$size` = ``
		
		
		
----
== Class Constant Summary ==

	
----
== Inherited Class Constant Summary ==


----
== Inherited Class Variable Summary ==


----
== Method Summary == 

																																																																														
== Inherited Method Summary == 

----
== Method Detail ==



= File::__construct =

*__construct(*
*mixed*
_$filename_, [*boolean*
_$binary_ = false], [*boolean*
_$delete_if_exists_ = false], [*boolean*
_$debug_ = true]* );*


	

	
*Parameters*
			_$filename_ path to the file
			_$binary_ [default value: false]
			_$delete_if_exists_ [default value: false]
			_$debug_ [default value: true]
		
*Remarks*

Constructor File




= File::close =

*close(*
* );*


	

	
*Remarks*

Method close


Close the file


*since:* 1.0.59

*access:* public



= File::copy =

*copy(*
*string*
_$destination_* );*


	

	
*Parameters*
			_$destination_ The new file destination
		
*Returns*
		Returns TRUE if file could bie copied, FALSE if not

*Remarks*

Method copy


*since:* 1.0.35

*access:* public



= File::debug_mode =

*debug_mode(*
[*boolean*
_$debug_ = true]* );*


	

	
*Parameters*
			_$debug_ [default value: true]
		
*Remarks*

Method debug_mode


*since:* 1.0.59

*access:* public



= File::exists =

*exists(*
* );*


	

	
*Remarks*

Method exists


Close the file


*since:* 1.0.35

*access:* public



= File::get_group_id =

*get_group_id(*
* );*


	

	
*Returns*
		The group id of the file

*Remarks*

Method get_group_id


*since:* 1.0.35

*access:* public



= File::get_name =

*get_name(*
* );*


	

	
*Returns*
		The filename

*Remarks*

Method get_name


*since:* 1.0.35

*access:* public



= File::get_owner_id =

*get_owner_id(*
* );*


	

	
*Returns*
		The user id of the file

*Remarks*

Method get_owner_id


*since:* 1.0.35

*access:* public



= File::get_size =

*get_size(*
* );*


	

	
*Returns*
		The filesize in bytes

*Remarks*

Method get_size


*since:* 1.0.35

*access:* public



= File::get_suffix =

*get_suffix(*
* );*


	

	
*Returns*
		The suffix of the file. If no suffix exists FALSE will be returned

*Remarks*

Method get_suffix


*since:* 1.0.35

*access:* public



= File::get_time =

*get_time(*
* );*


	

	
*Returns*
		The time of the last change as timestamp

*Remarks*

Method get_time


*since:* 1.0.35

*access:* public



= File::halt =

*halt(*
*string*
_$message_* );*


	

	
*Parameters*
			_$message_ all occurred errors as array
		
*Remarks*

Method halt


*since:* 1.0.59

*access:* public



= File::pointer_get =

*pointer_get(*
* );*


	

	
*Remarks*

Method pointer_get


*since:* 1.0.35

*access:* public



= File::pointer_set =

*pointer_set(*
*mixed*
_$offset_* );*


	

	
*Parameters*
			_$offset_ 
		
*Returns*
		Returns the actual pointer position

*Remarks*

Method pointer_set


*since:* 1.0.35

*access:* public



= File::read =

*read(*
* );*


	

	
*Returns*
		return data

*Remarks*

Method read


*since:* 1.0.64

*access:* public



= File::read_bytes =

*read_bytes(*
*mixed*
_$bytes_, [*double*
_$start_byte_ = 0]* );*


	

	
*Parameters*
			_$bytes_ 
			_$start_byte_ [default value: 0]
		
*Returns*
		Data from a binary file

*Remarks*

Method read_bytes


*since:* 1.0.35

*access:* public



= File::read_line =

*read_line(*
* );*


	

	
*Returns*
		A line from the file. If is EOF, false will be returned

*Remarks*

Method read_line


*since:* 1.0.35

*access:* public



= File::search =

*search(*
*string*
_$string_* );*


	

	
*Parameters*
			_$string_ The string which have to be searched
		
*Returns*
		Pointer offsets where string have been found. On no match, function returns false

*Remarks*

Method search


*since:* 1.0.35

*access:* public



= File::write =

*write(*
*string*
_$data_* );*


	

	
*Parameters*
			_$data_ The data which have to be written
		
*Returns*
		Returns TRUE if data could be written, FALSE if not

*Remarks*

Method write


*since:* 1.0.35

*access:* public



----

== Variable Detail ==
* `$action_before_reading` = `false` (line 33)
* *Data type:* `mixed`

* `$binary` = `` (line 27)
* *Data type:* `mixed`

* `$debug` = `true` (line 32)
* *Data type:* `mixed`

* `$exists` = ` false` (line 30)
* *Data type:* `mixed`

* `$file` = `` (line 26)
* *Data type:* `mixed`

* `$name` = `` (line 28)
* *Data type:* `mixed`

* `$size` = `` (line 29)
* *Data type:* `mixed`


----
== Class Constant Detail ==


----
